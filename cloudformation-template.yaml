AWSTemplateFormatVersion: '2010-09-09'
Description: 'Multitenant JSON Block Builder Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name
  DomainName:
    Type: String
    Default: frontend2.zanzalaz.com
    Description: Base domain name for tenants
  EC2KeyName:
    Type: String
    Default: Json-Blockbuilder-MVP-keypair
    Description: EC2 Key Pair name for SSH access

Resources:
  # DynamoDB Table for user management
  FrontendUsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: frontend-users
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: tenantId
          AttributeType: S
        - AttributeName: passcode
          AttributeType: S
      KeySchema:
        - AttributeName: tenantId
          KeyType: HASH
        - AttributeName: passcode
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # S3 Bucket for schemas
  UniversalFrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'universal-frontend-${AWS::AccountId}-${Environment}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE]
            AllowedOrigins: ['*']
            MaxAge: 3000

  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'json-blockbuilder-lambda-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt FrontendUsersTable.Arn
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub '${UniversalFrontendBucket.Arn}/*'
                  - !GetAtt UniversalFrontendBucket.Arn

  # Lambda Function
  JsonBlockBuilderLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'json-blockbuilder-api-${Environment}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import bcrypt
          import os
          from datetime import datetime, timedelta
          
          dynamodb = boto3.resource('dynamodb')
          s3 = boto3.client('s3')
          table = dynamodb.Table('frontend-users')
          bucket_name = os.environ['BUCKET_NAME']
          # insert the rest of the code manually for now lol
      Environment:
        Variables:
          BUCKET_NAME: !Ref UniversalFrontendBucket
      Timeout: 30

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'json-blockbuilder-api-${Environment}'
      Description: API Gateway for JSON Block Builder Lambda

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'api'

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${JsonBlockBuilderLambda.Arn}/invocations'

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

  # Lambda Permission for API Gateway
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref JsonBlockBuilderLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*'

  # EC2 Instance Role
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'json-blockbuilder-ec2-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
        - PolicyName: S3SchemaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub '${UniversalFrontendBucket.Arn}/schemas/*'
                  - !GetAtt UniversalFrontendBucket.Arn

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  # Security Group for EC2
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for JSON Block Builder EC2 instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2 AMI in us-east-1
      KeyName: !Ref EC2KeyName
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y nodejs npm git
          
          # Install forever globally
          npm install -g forever
          
          # Clone the repository (you'll need to provide the actual repo URL)
          git clone https://github.com/markd315/JSON-blockbuilder-frontend.git /opt/json-blockbuilder
          
          cd /opt/json-blockbuilder
          npm install
          
          # Start the application with forever
          forever start -c "npm start" ./
          
          # Create a startup script
          cat > /etc/systemd/system/json-blockbuilder.service << EOF
          [Unit]
          Description=JSON Block Builder Application
          After=network.target
          
          [Service]
          Type=simple
          User=ec2-user
          WorkingDirectory=/opt/json-blockbuilder
          ExecStart=/usr/bin/forever start -c "npm start" ./
          Restart=always
          Environment=AWS_REGION=us-east-1
          Environment=S3_BUCKET_NAME=!Ref UniversalFrontendBucket
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          systemctl enable json-blockbuilder.service
          systemctl start json-blockbuilder.service

  # EIP
  FrontendEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref EC2Instance

Outputs:
  ApiGatewayUrl:
    Description: API Gateway URL
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/api'
  
  S3BucketName:
    Description: S3 Bucket for schemas
    Value: !Ref UniversalFrontendBucket
  
  EC2PublicIP:
    Description: EC2 Instance Public IP
    Value: !Ref FrontendEIP
  
  DynamoDBTableName:
    Description: DynamoDB Table Name
    Value: !Ref FrontendUsersTable 